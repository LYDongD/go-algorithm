package main

import "fmt"

func coinChange(coins []int, amount int) int {
	if amount < 1 {
		return 0
	}

	dp := make([]int, amount)
	return findCount(dp, coins, amount)
}

func findCount(dp, coins []int, remain int) int {
	if remain < 0 {
		return -1
	}
	if remain == 0 {
		return 0
	}

	if dp[remain-1] > 0 {
		return dp[remain-1]
	}

	min := int(^uint(0) >> 1)
	for _, coin := range coins {
		lastCount := findCount(dp, coins, remain-coin)
		if lastCount >= 0 && min > lastCount {
			min = lastCount + 1
		}
	}

	if min == int(^uint(0)>>1) {
		dp[remain-1] = -1
	} else {
		dp[remain-1] = min
	}

	return dp[remain-1]
}

func main() {
	//fmt.Println(coinChange([]int{1, 2, 5}, 11))
	//fmt.Println(coinChange([]int{2}, 3))
	fmt.Println(coinChange([]int{186, 419, 83, 408}, 6249))

}
